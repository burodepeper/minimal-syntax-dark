.syntax--js {
  .syntax--variable {
    &.syntax--language {
      color: @syntax; // this
    }
  }

  &.syntax--constant {
    // &:not(.numeric) {
    //   color: @syntax-alt;
    // }

    &.syntax--support, // x, y, prototype :(
    &.syntax--dom { // width, height
      color: @text;
      font-weight: normal;
    }
  }

  &.syntax--support {
    &.syntax--function {
      &.syntax--event-handler {
        font-weight: bold;
      }
    }

    &.syntax--constant {
      color: @variable;
    }
  }

  &.syntax--instance {
    color: @syntax-alt;
  }

  &.syntax--constant.syntax--boolean {
    color: @constant;
  }

  &.syntax--embedded {
    .syntax--html.syntax--tag {
      color: @syntax-alt;
    }
  }

  &.syntax--support.syntax--class, // event, window
  {
    font-weight: normal;
    color: @syntax;
  }

  &.syntax--keyword {
    &.syntax--operator { // :, =, +, -
      // color: @text;
      color: @syntax-alt;

      &.syntax--new { // new
        color: @syntax;
        font-weight: normal;
      }

      &.syntax--comparison, // ==
      &.syntax--increment, // ++
      &.syntax--decrement, // --
      &.syntax--logical { // &&
        color: @syntax;
      }
    }

    &.syntax--control { // from, if, return

    }
  }

  &.syntax--meta {
    &.syntax--comma {
      color: @text;
    }
    &.syntax--prototype .syntax--support.syntax--constant { // prototype
      color: @syntax-alt;
    }
    &.syntax--arguments {
      > .syntax--punctuation {
        color: @syntax;
      }
    }
    &.syntax--function-call {
      & > .syntax--name {
        font-weight: normal;
      }
    }
  }

  &.syntax--entity.syntax--name.syntax--type.syntax--instance { // new {ClassName}
    // font-weight: normal;
  }
}
